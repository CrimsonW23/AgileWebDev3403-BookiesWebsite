"""Update models to match database schema

Revision ID: 38f6771a6ec5
Revises: b892089d947f
Create Date: 2025-05-12 08:30:31.080632

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector


# revision identifiers, used by Alembic.
revision = '38f6771a6ec5'
down_revision = 'b892089d947f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    # Get column info before making changes
    table_columns = {}
    for table in inspector.get_table_names():
        table_columns[table] = [col['name'] for col in inspector.get_columns(table)]
    
    # Handle active_bets table modifications
    if 'active_bets' in table_columns:
        with op.batch_alter_table('active_bets', schema=None) as batch_op:
            if 'bet_type_description' in table_columns['active_bets']:
                batch_op.drop_column('bet_type_description') 
            if 'created_by' not in table_columns['active_bets']:
                batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True)) 
                batch_op.create_foreign_key('fk_activebets_user', 'user', ['created_by'], ['id'])
            if 'stake_amount' in table_columns['active_bets']:
                batch_op.drop_column('stake_amount')
            if 'created_at' in table_columns['active_bets']:
                batch_op.drop_column('created_at')
            if 'bet_type_description' not in table_columns['active_bets']:
                batch_op.add_column(sa.Column('bet_type_description', sa.String(length=255), nullable=True))
            if 'max_stake' not in table_columns['active_bets']:
                batch_op.add_column(sa.Column('max_stake', sa.Float(), nullable=True))

    # Handle post table modifications
    if 'post' in table_columns:
        with op.batch_alter_table('post', schema=None) as batch_op:
            if 'author' in table_columns['post']:
                batch_op.alter_column('author',
                       existing_type=sa.VARCHAR(length=25),
                       type_=sa.Integer(),
                       nullable=False)
                # Check if index exists before dropping it
                indexes = inspector.get_indexes('post')
                index_names = [idx['name'] for idx in indexes]
                if 'ix_post_author' in index_names:
                    batch_op.drop_index('ix_post_author')
                batch_op.create_foreign_key('fk_post_user', 'user', ['author'], ['id'])

    # Handle reply table modifications
    if 'reply' in table_columns:
        with op.batch_alter_table('reply', schema=None) as batch_op:
            if 'author' in table_columns['reply']:
                batch_op.alter_column('author',
                       existing_type=sa.VARCHAR(length=25),
                       type_=sa.Integer(),
                       existing_nullable=True)
                # Check if index exists before dropping it
                indexes = inspector.get_indexes('reply')
                index_names = [idx['name'] for idx in indexes]
                if 'ix_reply_author' in index_names:
                    batch_op.drop_index('ix_reply_author')
                # Fixed: Add a name for the foreign key constraint
                batch_op.create_foreign_key('fk_reply_user', 'user', ['author'], ['id'])

    # Handle user table modifications
    if 'user' in table_columns:
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.add_column(sa.Column('first_name', sa.String(length=50), nullable=True))
            batch_op.add_column(sa.Column('last_name', sa.String(length=50), nullable=True))
            batch_op.add_column(sa.Column('phone', sa.String(length=10), nullable=True))
            batch_op.add_column(sa.Column('country', sa.String(length=50), nullable=True))
            batch_op.add_column(sa.Column('dob', sa.Date(), nullable=True))
            batch_op.add_column(sa.Column('date_joined', sa.DateTime(), nullable=True))
            batch_op.add_column(sa.Column('active', sa.Boolean(), nullable=True))
            batch_op.alter_column('username',
                   existing_type=sa.VARCHAR(length=25),
                   type_=sa.String(length=80),
                   nullable=False)
            batch_op.alter_column('email',
                   existing_type=sa.VARCHAR(length=50),
                   type_=sa.String(length=120),
                   nullable=False)
            batch_op.alter_column('password',
                   existing_type=sa.VARCHAR(length=150),
                   type_=sa.String(length=200),
                   nullable=False)
            batch_op.drop_index('ix_user_password')

    # Handle placed_bets table creation
    if 'placed_bets' not in table_columns:
        op.create_table(
            'placed_bets',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('event_name', sa.String(length=100), nullable=False),
            sa.Column('bet_type_description', sa.String(length=255), nullable=False),
            sa.Column('bet_type', sa.String(length=50), nullable=False),
            sa.Column('stake_amount', sa.Float(), nullable=False),
            sa.Column('odds', sa.Float(), nullable=False),
            sa.Column('potential_winnings', sa.Float(), nullable=False),
            sa.Column('scheduled_time', sa.DateTime(), nullable=False),
            sa.Column('duration', sa.Interval(), nullable=False),
            sa.Column('status', sa.String(length=20), nullable=False),
            sa.Column('actual_winnings', sa.Float(), nullable=True),
            sa.Column('date_settled', sa.DateTime(), nullable=True),
            sa.Column('event_outcome', sa.String(length=50), nullable=True),
            sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_placedbets_user'),
            sa.PrimaryKeyConstraint('id')
        )
    else:
        with op.batch_alter_table('placed_bets', schema=None) as batch_op:
            batch_op.alter_column(
                'potential_winnings',
                existing_type=sa.Float(),
                type_=sa.DECIMAL(10, 2),
                nullable=False
            )

    # Handle created_bets table creation
    if 'created_bets' not in table_columns:
        op.create_table(
            'created_bets',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('event_name', sa.String(length=100), nullable=False),
            sa.Column('bet_type_description', sa.String(length=255), nullable=False),
            sa.Column('bet_type', sa.String(length=50), nullable=False),
            sa.Column('max_stake', sa.Float(), nullable=False),
            sa.Column('odds', sa.Float(), nullable=False),
            sa.Column('scheduled_time', sa.DateTime(), nullable=False),
            sa.Column('duration', sa.Interval(), nullable=False),
            sa.Column('created_by', sa.Integer(), nullable=False),
            sa.Column('status', sa.String(length=20), nullable=False),
            sa.ForeignKeyConstraint(['created_by'], ['user.id'], name='fk_createdbets_user'),
            sa.PrimaryKeyConstraint('id')
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    # Get column info before making changes
    table_columns = {}
    for table in inspector.get_table_names():
        table_columns[table] = [col['name'] for col in inspector.get_columns(table)]
    
    if 'user' in table_columns:
        with op.batch_alter_table('user', schema=None) as batch_op:
            # Only create index if not already exists
            indexes = inspector.get_indexes('user')
            index_names = [idx['name'] for idx in indexes]
            if 'ix_user_password' not in index_names and 'password' in table_columns['user']:
                batch_op.create_index('ix_user_password', ['password'], unique=False)
            
            if 'password' in table_columns['user']:
                batch_op.alter_column('password',
                       existing_type=sa.String(length=200),
                       type_=sa.VARCHAR(length=150),
                       nullable=True)
            if 'email' in table_columns['user']:
                batch_op.alter_column('email',
                       existing_type=sa.String(length=120),
                       type_=sa.VARCHAR(length=50),
                       nullable=True)
            if 'username' in table_columns['user']:
                batch_op.alter_column('username',
                       existing_type=sa.String(length=80),
                       type_=sa.VARCHAR(length=25),
                       nullable=True)
            
            # Drop columns only if they exist
            for col in ['active', 'date_joined', 'dob', 'country', 'phone', 'last_name', 'first_name']:
                if col in table_columns['user']:
                    batch_op.drop_column(col)

    if 'reply' in table_columns:
        with op.batch_alter_table('reply', schema=None) as batch_op:
            # Fixed: Specify the constraint name in the downgrade function too
            try:
                batch_op.drop_constraint('fk_reply_user', type_='foreignkey')
            except:
                pass  # If constraint doesn't exist or has a different name
            
            if 'author' in table_columns['reply']:
                # Only create index if it doesn't exist
                indexes = inspector.get_indexes('reply')
                index_names = [idx['name'] for idx in indexes]
                if 'ix_reply_author' not in index_names:
                    batch_op.create_index('ix_reply_author', ['author'], unique=False)
                
                batch_op.alter_column('author',
                       existing_type=sa.Integer(),
                       type_=sa.VARCHAR(length=25),
                       existing_nullable=True)

    if 'post' in table_columns:
        with op.batch_alter_table('post', schema=None) as batch_op:
            try:
                batch_op.drop_constraint('fk_post_user', type_='foreignkey')
            except:
                pass  # If constraint doesn't exist or has a different name
            
            if 'author' in table_columns['post']:
                # Only create index if it doesn't exist
                indexes = inspector.get_indexes('post')
                index_names = [idx['name'] for idx in indexes]
                if 'ix_post_author' not in index_names:
                    batch_op.create_index('ix_post_author', ['author'], unique=False)
                
                batch_op.alter_column('author',
                       existing_type=sa.Integer(),
                       type_=sa.VARCHAR(length=25),
                       nullable=True)

    if 'active_bets' in table_columns:
        with op.batch_alter_table('active_bets', schema=None) as batch_op:
            # Add columns only if they don't exist
            if 'created_at' not in table_columns['active_bets']:
                batch_op.add_column(sa.Column('created_at', sa.DATETIME(), nullable=True))
            if 'stake_amount' not in table_columns['active_bets']:
                batch_op.add_column(sa.Column('stake_amount', sa.FLOAT(), nullable=False))
            
            try:
                batch_op.drop_constraint('fk_activebets_user', type_='foreignkey')
            except:
                pass  # If constraint doesn't exist
            
            if 'created_by' in table_columns['active_bets']:
                batch_op.drop_constraint('fk_activebets_user', type_='foreignkey')
                batch_op.drop_column('created_by')
             
            
            if 'max_stake' in table_columns['active_bets']:
                batch_op.drop_column('max_stake')
            
            if 'bet_type_description' not in table_columns['active_bets']:
                batch_op.add_column(sa.Column('bet_type_description', sa.VARCHAR(length=255), nullable=True))

    if 'placed_bets' in table_columns:
        with op.batch_alter_table('placed_bets', schema=None) as batch_op:
            batch_op.alter_column(
                'potential_winnings',
                existing_type=sa.DECIMAL(10, 2),
                type_=sa.Float(),
                nullable=False
            )
        op.drop_table('placed_bets')

    if 'created_bets' in table_columns:
        op.drop_table('created_bets')
    # ### end Alembic commands ###